<!DOCTYPE html>
<html>
<head> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  
  <style>
  </style>
  
  
</head>
<body>
  <div id="nav-placeholder">
  </div>
  
  <div id="sid-check">
  </div>
  
  <div id="test-data">
  </div>
  
  <div id="data-frame" class="container">
    <div class="row">
      <div class="col-xs-6 col-lg-4">
        <canvas id="chart0"></canvas>
      </div>
      <div class="col-xs-12 col-lg-8">
        <div class="row">
          <div class="col-xs-12 col-lg-6">
            <canvas id="chart1"></canvas>
          </div>
          <div class="col-xs-12 col-lg-6">
            <canvas id="chart2"></canvas>
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12 col-lg-6">
            <canvas id="chart3"></canvas>
          </div>
          <div class="col-xs-12 col-lg-6">
            <canvas id="chart4"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    
    var sid;
    var data;
    
    jQuery(document).ready(function($) {
      $("#nav-placeholder").load("nav.ejs", function() {
        $(".nav").find(".active").removeClass("active");
        $("#profilelink").addClass("active");
      });
      
      sid = '<%= sid %>';
      //$('#sid-check').html(sid); //use this for testing
      
      // this changes the session variable to sid from this page
      // needed for if user refreshes page
      $(window).bind('beforeunload', function() {
        $.post('/joindatasession', {sid: sid}, function(data) {       
        });
      });
      
      $.post('/fetchresults', {sid: sid}, function(d) {
        data = d;
        //$('#test-data').html(JSON.stringify(data)); //use this for testing
        fillCharts(d);
      });
      
    });
    
    
    function fillCharts(d) {
      var ctx0 = $('#chart0')[0].getContext('2d');
      var chart0 = new Chart(ctx0, {
        type: 'doughnut',
        data: {
          labels: ['Hider', 'Seeker'],
          datasets: [{
                       backgroundColor: ['rgb(0, 230, 191)', 'rgb(255, 204, 153)'],
                       data: totalWinRates()
                    }]
        },
        options: {
          title: {
            display: true,
            text: 'Overall Win Rate'
          },
          animation: {
            animateScale: true
          }
        }
      });
      
      
      var evadeWRs = winRateByRound(0);
      var ctx1 = $('#chart1')[0].getContext('2d');
      var chart1 = new Chart(ctx1, {
        type: 'bar',
        data: {
          labels: ['Box 1', 'Box 2', 'Box 3', 'Box 4'],
          datasets: [
                      {
                        label: 'Hider',
                        backgroundColor: 'rgb(0, 230, 191)',
                        data: evadeWRs[0]
                      },
                      {
                        label: 'Seeker',
                        backgroundColor: 'rgb(255, 204, 153)',
                        data: evadeWRs[1]
                      }
                    ]
        },
        options: {
          title: {
            display: true,
            text: 'Evade Round Win Rate'
          }
        }
      });
      
      var ctx2 = $('#chart2')[0].getContext('2d');
      var chart2 = new Chart(ctx2, {
        type: 'bar',
        data: {
          labels: ['Box 1', 'Box 2', 'Box 3', 'Box 4'],
          datasets: [
                      {
                        label: 'Hider',
                        backgroundColor: 'rgb(0, 230, 191)',
                        data: numChosen(0,0)
                      },
                      {
                        label: 'Seeker',
                        backgroundColor: 'rgb(255, 204, 153)',
                        data: numChosen(1,0)
                      }
                    ]
        },
        options: {
          title: {
            display: true,
            text: 'Evade Round Choice Counts'
          }
        }
      });
      
      var findWRs = winRateByRound(1);
      var ctx3 = $('#chart3')[0].getContext('2d');
      var chart3 = new Chart(ctx3, {
        type: 'bar',
        data: {
          labels: ['Box 1', 'Box 2', 'Box 3', 'Box 4'],
          datasets: [
                      {
                        label: 'Hider',
                        backgroundColor: 'rgb(0, 230, 191)',
                        data: findWRs[0]
                      },
                      {
                        label: 'Seeker',
                        backgroundColor: 'rgb(255, 204, 153)',
                        data: findWRs[1]
                      }
                    ]
        },
        options: {
          title: {
            display: true,
            text: 'Find Round Win Rate'
          }
        }
      });
      
      var ctx4 = $('#chart4')[0].getContext('2d');
      var chart4 = new Chart(ctx4, {
        type: 'bar',
        data: {
          labels: ['Box 1', 'Box 2', 'Box 3', 'Box 4'],
          datasets: [
                      {
                        label: 'Hider',
                        backgroundColor: 'rgb(0, 230, 191)',
                        data: numChosen(0,1)
                      },
                      {
                        label: 'Seeker',
                        backgroundColor: 'rgb(255, 204, 153)',
                        data: numChosen(1,1)
                      }
                    ]
        }, 
        options: {
          title: {
            display: true,
            text: 'Find Round Choice Counts'
          }
        }
      });
    }
    
    // round=0 for evade, round=1 for find
    // returns two four-element lists, win rate for each player for each box
    function winRateByRound(round) {
      let cs = data.map(di => di.choices[round]);
      var n = cs.length;
      var wins = [[0,0,0,0],[0,0,0,0]]; //wins for each player for each box
      for (var i = 0; i < cs.length; i++) {
        if (cs[i][0] === cs[i][1]) {
          if (round == 0) {
            wins[1][cs[i][1]-1]++;
          } else {
            wins[0][cs[i][0]-1]++;
            wins[1][cs[i][1]-1]++;
          }
        } else {
          if (round == 0) {
            wins[0][cs[i][0]-1]++;
          }
        }
      }
      var ncs = [numChosen(0,round), numChosen(1, round)];
      for (var i = 0; i < 2; i++) {
        for (var j = 0; j < 4; j++) {
          if (ncs[i][j] != 0) {
            wins[i][j] = wins[i][j]/ncs[i][j];
          }
        }
      }
      return wins;
    }
    
    function totalWinRates() {
      let rs = data.map(di => di.results);
      var n = rs.length;
      var hiderWins = 0;
      var seekerWins = 0;
      for (var i = 0; i < rs.length; i++) {
        if (rs[i][0] > rs[i][1]) {
          hiderWins++;
        } else if (rs[i][0] < rs[i][1]) {
          seekerWins++;
        } 
      }
      return [hiderWins/n, seekerWins/n];
    }
    
    // same as above for player
    // round=0 for evade, round=1 for find
    // returns list of counts for boxes 1,2,3,4
    function numChosen(player, round) {
      let cs = data.map(di => di.choices[round][player]);
      var totals = [0,0,0,0];
      for (var i = 0; i < cs.length; i++) {
        totals[cs[i]-1]++;
      }
      return totals;
    }
    
  </script> 

<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

</body>
</html>